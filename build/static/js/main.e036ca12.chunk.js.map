{"version":3,"sources":["shared/settings.js","shared/LoadingIndicatorComponent.js","extension/extension.js","config/config.js","Main.js","index.js","shared/utils.js"],"names":["config","name","none","settingsKey","configPopup","url","size","height","width","ids","treeContainer","colors","defaults","module","exports","LoadingIndicatorComponent","props","className","msg","fadeIn","Extension","state","resize","bind","onComplete","onClick","thisComponent","this","drill","children","currentLevel","maxLevel","forEach","child","collapsed","settings","a","getDataFromTableau","data","worksheet","rawData","createHierarchy","formatting","levelsToShow","treantConfig","util","getSelectorById","rootNodeOrientation","verticalAlignment","clearTreant","chart","Treant","setState","selectedWorksheet","matches","tableau","extensions","dashboardContent","dashboard","worksheets","filter","ws","length","getSummaryDataAsync","then","response","dataset","flat","row","id","parentId","text","x","column","columns","fieldName","isGeneric","nodeId","formattedValue","nodeLabel","action","field","color","colorToHex","background","font","node","toUpperCase","push","root","map","parentIndex","findIndex","el","log","myChart","destroy","loadSettings","settingsString","get","renderTreant","JSON","parse","window","addEventListener","initializeAsync","location","href","ui","displayDialogAsync","closePayload","catch","error","errorCode","ErrorCodes","DialogClosedByUser","message","TableauEventType","SettingsChanged","settingsEvent","t","$","css","innerHeight","innerWidth","tree","redraw","target","each","attr","enabled","selection","parentElement","hasParameterId","parameter","findParameterAsync","changeValueAsync","isLoading","showLoading","React","Component","Config","saveThenCloseDialog","closeDialog","getFieldsFromWorksheet","getParametersFromDashboard","getParametersAsync","fieldsDict","parameters","Promise","all","fields","index","isSelected","isItemSelected","initializeDialogAsync","item","setting","set","stringify","saveAsync","newSavedSettings","title","getFields","key","savedSelection","isSelection","fieldsList","hasOwnProperty","selectedSheet","value","selected","setSelection","section","newSettings","content","0","kind","onChange","e","label","1","checked","params","getParameters","getParamFields","2","option","min","max","step","pageSteps","onValueChange","footer","tabs","selectedTabIndex","onTabChange","App","Navigator","useLocation","hash","ReactDOM","render","document","getElementById","console","rgba","rgb","cvs","ctx","createElement","getContext","fillStyle","fillRect","getImageData","colorToRGBA","idx","toString","slice","join","Math","round","parseInt"],"mappings":"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","file":"static/js/main.e036ca12.chunk.js","sourcesContent":["let noneEnum = 'none';\nlet config = {\n\tname: 'TreantJS Extension',\n\tnone: noneEnum,\n\tsettingsKey: 'treantjs',\n\tconfigPopup: {\n\t\turl: 'config',\n\t\tsize: {\n\t\t\theight: 500,\n\t\t\twidth: 400\n\t\t}\n\t},\n\tids: {\n\t\ttreeContainer: 'tree-container'\n\t},\n\tcolors: {\n\t\t'background': 'white'\n\t},\n\tdefaults: {\n\t\t'data':{\n\t\t\t'worksheet': '',\n\t\t\t'nodeId': '',\n\t\t\t'nodeLabel': '',\n\t\t\t'parentId': '',\n\t\t\t'color': noneEnum,\n\t\t},\n\t\t'action':{\n\t\t\t'enabled': false,\n\t\t\t'field': '',\n\t\t\t'parameter': ''\n\t\t},\n\t\t'formatting': {\n\t\t\t'rootNodeOrientation': 'WEST',\n\t\t\t'verticalAlignment': 'TOP',\n\t\t\t'levelsToShow': 2\n\t\t}\n\t}\n}\n\nmodule.exports = config;","import React from 'react';\nimport Spinner from 'react-spinkit';\nimport '.././styles/LoadingIndicator.css';\n\nfunction LoadingIndicatorComponent(props) {\n  return (\n    <div className='loadingIndicator'>\n      <h3>{props.msg}</h3>\n      <Spinner name='three-bounce' fadeIn='none' />\n    </div>\n  );\n}\n\nexport default LoadingIndicatorComponent;\n","import React from 'react';\nimport config from '.././shared/settings';\nimport util from '.././shared/utils';\nimport LoadingIndicatorComponent from '.././shared/LoadingIndicatorComponent';\n\n\n// Declare this so our linter knows that tableau is a global object\n/* global tableau */\n/* global Treant */\n/* global $ */\n\nclass Extension extends React.Component {\n\n  /****************************/\n  /*  Define initial state  */\n  /****************************/\n  constructor(props) {\n    super(props);\n    this.state = {\n      'settings': config.defaults,\n      'myChart': null,\n      'isLoading': true\n    }\n    //  Bind event handlers to `this`\n    this.resize = this.resize.bind(this);\n    this.onComplete = this.onComplete.bind(this);\n    this.onClick = this.onClick.bind(this);\n  }\n\n  //  Run when the component is first added to the DOM\n  componentDidMount(){\n\n    //  Save a reference to `this`\n    let thisComponent = this;\n\n    /*******************************************************************************************/\n    /*  Automatically size the div container, based on extension's available height/width      */\n    /*******************************************************************************************/\n\n    //  create event handler for when the frame resizes\n    window.addEventListener(\"resize\", thisComponent.resize);\n\n    //  Run once at the start, to make sure the visual fits within the container\n    thisComponent.resize();\n\n    /**************************************/\n    /*  Initialize the Tableau extension  */\n    /**************************************/\n\n    /*  Functinon to drill into the hierarchy, based on level   */\n    function drill(children, currentLevel, maxLevel){\n\n      //  Do we keep drilling?\n      if (currentLevel<maxLevel){\n        //  Loop through all children\n        children.forEach( (child) => {\n          //  Mark the child as not-collapsed\n          child.collapsed = false;\n          //  If the child has more children, keep drilling\n          if (child.children) {\n            drill(child.children, currentLevel+1, maxLevel);\n          }\n        })\n      }\n    }\n\n    /*  Function to render the treant visualization   */\n    async function renderTreant(settings) {\n\n      //  Load data\n      let rawData = await getDataFromTableau(settings.data.worksheet);\n\n      //  Structure data for TreantJS\n      let data = createHierarchy(rawData, settings)\n\n      //  Make sure the first node is expanded (2 levels)\n      data.collapsed = false;  \n      \n      //  Handle level drilldown\n      if (settings.formatting.levelsToShow>2) {\n        //  Make sure the first x levels past the root is expanded\n        drill(data.children, 2, settings.formatting.levelsToShow);\n      }\n      \n      //  Setup config object\n      let treantConfig = {\n        'nodeStructure': data,\n        'chart': {\n          'container': util.getSelectorById(config.ids.treeContainer),\n          'rootOrientation': settings.formatting.rootNodeOrientation,   //  NORTH, EAST, WEST, SOUTH\n          'nodeAlign': settings.formatting.verticalAlignment,       //  CENTER, TOP, BOTTOM\n          'levelSeparation': 30,      //  PX\n          'siblingSeparation': 30,    //  px\n          'subTreeSeparation': 30,    //  px\n          'hideRootNode':false,\n          'animateOnInit': false,\n          'animateOnInitDelay': 500,    //  milliseconds\n          'scrollbar': 'native',      //  native, fancy, None\n          'padding': 15,          //  px\n          'connectors': {\n            'type': 'step',     //  curve, bCurve, step, straight\n            'stackIndent': 15     //  px\n          },\n          'node': {\n            'collapsable': true,\n            'HTMLclass': 'nodeExample1',//  From example.css\n            'target': '_self'     //  _self or _blank\n          },\n          // 'animation': {\n          //  'nodeSpeed' : 450,      //  ms\n          //  'nodeAnimation': 'linear',\n          //  'connectorsSpeed': 450,   //  ms\n          //  'connectorsAnimation': 'linear'\n          // },\n          'callback': {\n            'onAfterClickCollapseSwitch': thisComponent.onClick,\n            'onTreeLoaded': thisComponent.onComplete\n          }\n        }\n      }\n      \n      //  Clear container just in case\n      clearTreant();\n\n      //  Render into div container\n      let chart = new Treant(treantConfig);\n\n      //  Save back to the state\n      thisComponent.setState({\n        'myChart': chart,\n        'settings': settings,\n        'isLoading': false\n      })\n    }\n\n    /*  Function to get data from the tableau worksheet   */\n    function getDataFromTableau(selectedWorksheet) {\n        \n      //  Get the current dashboard\n      let dashboard = tableau.extensions.dashboardContent.dashboard;\n\n      //  Get the worksheet with our data\n      let matches = dashboard.worksheets.filter( function(ws){\n        return ws.name === selectedWorksheet;\n      })\n\n      //  Get the summary data from the selected worksheet\n      if (matches.length === 1) {\n        //  Worksheet found!\n        const worksheet = matches[0];\n        //  Return the data in that worksheet\n        return worksheet.getSummaryDataAsync().then(function(response){\n          return response\n        })\n      } else {\n        //  No worksheet found, return an empty data set\n        return null\n      }\n    }\n\n    /*  Process the data, and create a structure TreantJS can read  */\n    function createHierarchy(dataset, settings){\n\n      //  Sample data structure, for when no data was added\n      const sampleData = {\n          text: { name: \"Please configure the extension, in order to view your hierarchy tree\" },\n          children: [\n              {\n                  text: { name: \"sample data 1\" }\n              },\n              {\n                  text: { name: \"sample data 2\" }\n              }\n          ]\n      }\n\n      //  Was there any data provided?\n      if (!dataset) {\n\n        //  No, so return the sample structure to provide instructions\n        return sampleData;\n\n      } else {\n\n        //  Yes, so parse the data table and convert to a tree structure\n\n        //  Define constant for NULL values\n        let n = 'NULL';\n\n        //  Create a flat array of nodes in the format required for treantjs\n        let flat = [];\n        dataset.data.forEach( function(row){\n\n          //  Init placeholder for these \n          let id,\n            parentId,\n            text = {\n              'name': ''\n            };\n\n          //  Use the settings, to determine the column #s for id, parent, and label\n          for (let x=0; x<row.length; x++){\n            \n            //  Get the column name\n            let column = dataset.columns[x].fieldName;\n\n            //  Flag to check if the data point is generic text for the box, or used somewhere specific\n            let isGeneric = true;\n\n            //  Figure out where to put this data point\n            if (column === settings.data.nodeId){\n              //  It's the id of the node\n              id = row[x].formattedValue;\n              isGeneric = false;\n            } \n            if (column === settings.data.nodeLabel){\n              //  Its the node's text label\n              text.name = row[x].formattedValue;\n              isGeneric = false;\n            }\n            if (column === settings.data.parentId){\n              //  Its the node's parent id\n              parentId = row[x].formattedValue;\n              isGeneric = false;\n            }\n            if (column === settings.action.field){\n              //  Its the node's parent id\n              text['data-parameter'] = row[x].formattedValue;\n              isGeneric = false;\n            }\n            if (column === settings.data.color){\n              //  Its the node's background color\n              let colors = util.colorToHex(row[x].formattedValue);\n              text['data-bg-color'] = colors.background;\n              text['data-font-color'] = colors.font;\n              isGeneric = false;\n            }\n            if (isGeneric) {\n              //  everything else is supplimental info, and should be displayed as text\n              text[column] = row[x].formattedValue;\n            }\n          }\n\n          //  is there a parent id?\n          let parent = (parentId.toUpperCase() === n) ? null : parentId;\n\n          //  Define a node\n          let node = {\n            'HTMLid': 'tree-node-' + id, \n            'HTMLclass': 'card',\n            'parentId': parent,       //  Needed only for the hierarchy creation\n            'id': id,           //  Needed only for the hierarchy creation\n            'collapsed': true,        //  Make the whole tree collapsed by default\n            'text': text\n          }\n\n          //  Add the node to our dictionary\n          flat.push(node)\n        })\n\n        /* stolen from: https://hackernoon.com/you-might-not-need-that-recursive-function-in-javascript-275651522185  */\n\n        // Create root for top-level node(s)\n        const root = [];\n        // Cache found parent index\n        const map = {};\n\n        flat.forEach(node => {\n          // No parentId means top level\n          if (!node.parentId) return root.push(node);\n          \n          // Insert node as child of parent in flat array\n          let parentIndex = map[node.parentId];\n          if (typeof parentIndex !== \"number\") {\n            parentIndex = flat.findIndex(el => el.id === node.parentId);\n            map[node.parentId] = parentIndex;\n          }\n          \n          if (parentIndex<0){\n            util.log('Node ' + node.id + ' specified a parent of id ' + node.parentId + ', but that parent does not exist.  skipping this one.')\n          } else {\n            if (!flat[parentIndex].children) {\n              return flat[parentIndex].children = [node];\n            }\n            flat[parentIndex].children.push(node);\n          }\n        });\n\n        //  The above code creates an array (in case of multiple roots), but we can assume a single root node\n        return root[0];\n      }\n    }\n\n    /*  Function to clear any existing treant visualizations  */\n    function clearTreant() {\n\n      //  Has the myChart object been initialized w/ the treant model?\n      if (thisComponent.state.myChart){\n        //  Yes, call the destroy function\n        thisComponent.state.myChart.destroy()\n      } \n    }\n\n    /**************************************/\n    /*  Initialize the Tableau extension  */\n    /**************************************/\n\n    //  Function that runs when the user clicks the configure button in Tableau\n    function configure () {\n\n      //  Determine the config popup's url\n      const url = window.location.href + '#config';\n    \n      //  Initialize the extension's config popup     \n      tableau.extensions.ui.displayDialogAsync(url, '', config.configPopup.size).then((closePayload) => {\n        loadSettings()\n      }).catch((error) => {\n        // One expected error condition is when the popup is closed by the user (meaning the user\n        // clicks the 'X' in the top right of the dialog).  This can be checked for like so:\n        switch (error.errorCode) {\n          case tableau.ErrorCodes.DialogClosedByUser:\n            util.log('Config popup was closed by user');\n            break;\n          default:\n            util.log(error.message);\n        }\n      });\n    }\n\n    //  Function to get the tableau settings and update state\n    function loadSettings(){\n      //  Fetch the new settings from tableau api\n      const settingsString = tableau.extensions.settings.get(config.settingsKey)\n      //  Save to this component\n      const settings = settingsString ? JSON.parse(settingsString) : config.defaults;\n      //  Re-render the tree\n      renderTreant(settings);\n    }\n\n    //  Initialize the extension\n    tableau.extensions.initializeAsync({'configure': configure}).then(function () {\n\n      //  Mark the tableau api as loaded\n      loadSettings()\n\n      //  Watch for updates to settings\n      tableau.extensions.settings.addEventListener(tableau.TableauEventType.SettingsChanged, (settingsEvent) => {\n        loadSettings()\n      });\n    });\n  }\n\n  /**************************************/\n  /*  Event Handlers                    */\n  /**************************************/\n\n  /*  Function to run, after the object is resized  */\n  resize(){\n\n    //  Resize the html element's height/width\n    let t = $(util.getSelectorById(config.ids.treeContainer));\n    $(t).css('height', window.innerHeight);\n    $(t).css('width', window.innerWidth);\n    \n    //  redraw the tree\n    if (this.state.myChart) {\n      this.state.myChart.tree.redraw()\n    }\n    util.log(\"Resizing the tree\")\n  }\n\n  /*  Event handler for when the tree is completed  */\n  onComplete(target){\n\n    //  Set background color for each node\n    $(\"div.node\").each(function(){\n      $(this).css('background-color', $(this).attr('data-bg-color'))\n      $(this).css('color', $(this).attr('data-font-color'))\n    })\n\n    //  Remove the loading dialog\n    \n\n    util.log(\"Treant visual complete\");\n  }\n\n  /*  Event handler for when a node is clicked  */\n  onClick(target){\n\n    //  Is the setting enabled, to set parameter values on click?\n    if (this.state.settings.action.enabled) {\n\n      //  Get the new parameter selection\n      const selection = $(target.parentElement).attr('data-parameter');\n\n      //  Make sure a parameter & field are specified, and there was a value\n      let hasParameterId = this.state.settings.action.parameter.length>0,\n          hasParameterField = this.state.settings.action.field.length>0;\n      if (hasParameterField && hasParameterId && selection){\n\n        //  Find a reference to the tableau parameter\n        tableau.extensions.dashboardContent.dashboard.findParameterAsync(this.state.settings.action.parameter).then( (parameter) => {\n          //  Make sure a valid parameter was returned  \n          if (parameter) {\n            //  Update it's value\n            parameter.changeValueAsync(selection)\n          }\n        })\n      }\n    }   \n  }\n\n  /**************************************/\n  /*  HTML Output to render             */\n  /**************************************/\n  render() {\n    const showLoading = () => {\n      if (this.state.isLoading){\n        return <LoadingIndicatorComponent msg=\"\"></LoadingIndicatorComponent>\n      }\n    }\n    return (\n      <div>\n        { showLoading() }\n        <div id={config.ids.treeContainer}>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Extension;\n","import React from 'react';\nimport { Button, Tabs, DropdownSelect, Checkbox, Stepper } from '@tableau/tableau-ui';\nimport config from '.././shared/settings';\nimport './config.css';\n\n// Declare this so our linter knows that tableau is a global object\n/* global tableau */\n\nclass Config extends React.Component{\n\n  /****************************/\n  /*  Define initial state  */\n  /****************************/\n  constructor(props) {\n    super(props);\n    this.state = {\n      'settings': config.defaults,\n      'dashboard': {},\n      'parameters': [],\n      'worksheets': [],\n      'fields': {},\n      'selectedTabIndex': 0,\n      'selectedSheet': null\n    }\n    //  Bind event handlers to `this`\n    this.saveThenCloseDialog = this.saveThenCloseDialog.bind(this);\n    this.closeDialog = this.closeDialog.bind(this);\n  }\n\n  /**********************************************/\n  /*  Run when component is 1st written to DOM  */\n  /**********************************************/\n  componentDidMount(){\n\n    //  Function to asynchronously fetch all the column headers on a worksheet\n    function getFieldsFromWorksheet(worksheet){\n      //  Return the promise for getSummaryDataAsync()\n      return worksheet.getSummaryDataAsync().then(function(response) {\n        //  Return the columns array\n        return response.columns;\n      })\n    }\n\n    //  Function to asynchronously fetch all parameters from a dashboard\n    function getParametersFromDashboard(dashboard){\n      //  Return the promise for getParametersAsync()\n      return dashboard.getParametersAsync().then(function(response){\n        //  Return the parameters array\n        return response;\n      })\n    }\n\n    // Function to asynchronously get all data needed for the config popup\n    async function initConfig(){\n\n      //  Look for any saved settings\n      const settingsString = tableau.extensions.settings.get(config.settingsKey);\n      const settings = settingsString ? JSON.parse(settingsString) : config.defaults;\n\n      //  Update the reference to the dashbaord\n      let dashboard = tableau.extensions.dashboardContent.dashboard;\n\n      //  Initialize some placeholders\n      let worksheets = [];\n      let fieldsDict = {};\n\n      //  Get a list of parameters for this dashboard\n      let parameters = await getParametersFromDashboard(dashboard);\n\n      //  Create promise array to make the call for each worksheet on the dashboard\n      let dataset = await Promise.all(dashboard.worksheets.map(async (worksheet) => {\n        //  Define the promise for this worksheet\n        let fields = await getFieldsFromWorksheet(worksheet);\n        //  Return the worksheet, along w/ the fields\n        return {\n          'worksheet': worksheet,\n          'fields': fields\n        }        \n      }));\n\n      //  Organize the data returned\n      dataset.forEach(function(data,index){\n        //  Is this the current selected worksheet?\n        let isSelected = thisComponent.isItemSelected(data.worksheet.name, settings.data.worksheet, index);\n        //  Save a reference to this worksheet\n        worksheets.push({'value': data.worksheet.name, 'label': data.worksheet.name, 'isSelected': isSelected})\n        //  Mark the selected worksheet\n        if (isSelected){\n          settings.data.worksheet = data.worksheet.name;\n        }\n        //  Save the fields for this worksheet\n        fieldsDict[data.worksheet.name] = data.fields\n\n      })\n\n      //  Update the state\n      thisComponent.setState({\n        'settings': settings,\n        'dashboard': dashboard,\n        'parameters': parameters,\n        'worksheets': worksheets,\n        'selectedSheet': settings.data.worksheet,\n        'fields': fieldsDict\n      })\n    }\n\n    //  Save a reference to this component\n    let thisComponent = this;\n\n    //  Initialize the popup using tableau extension api\n    tableau.extensions.initializeDialogAsync().then(initConfig)\n  }\n\n  // Background helper that checks to see if the current item should be marked as selected\n  isItemSelected(item, setting, index) {\n    //  Make sure something is selected as a setting\n    if (setting) {\n      //  Return true, if the item matches the setting\n      return (item === setting);\n    } else {\n      //  Return true, if there is no setting but this is the first item in the list\n      return (index === 0);\n    }\n  }\n\n  //  Function to save and then close the popup dialog\n  saveThenCloseDialog () {\n\n    //  Save a reference to this component\n    let thisComponent = this;\n\n    //  Persist the changes made to settings\n    tableau.extensions.settings.set(config.settingsKey, JSON.stringify(thisComponent.state.settings));\n    tableau.extensions.settings.saveAsync().then((newSavedSettings) => {\n      thisComponent.closeDialog()\n    });\n  }\n\n  //  Function to close the popup without saving\n  closeDialog() {\n    //  Trigger the popup to close\n    tableau.extensions.ui.closeDialog();\n  }\n\n  /*  HTML Output   */\n  render() {\n\n    //  Create a title bar\n    const title = <div className=\"tableau-titlebar\">\n                    <span className=\"tableau-titlebar-label\">Configure Extension</span>\n                    <span className=\"tableau-titlebar-close-button\" onClick={this.closeDialog}>x</span>\n                  </div>\n\n    //  Define what tabs to display in the config popup\n    const tabs = [ \n      { \n        content: 'Data', \n      }, { \n        content: 'Actions' \n      }, { \n        content: 'Formatting' \n      } \n    ];\n\n    //  Function to produce a set of dropdown menu items for each field\n    const getFields = (key) => {\n      //  Check to see if there's a user selection already saved\n      const savedSelection = this.state.settings.data[key];\n      const isSelection = (savedSelection.length>0);\n      //  Safely get a list of all fields for the given worksheet\n      let fieldsList = this.state.fields.hasOwnProperty(this.state.selectedSheet) ? this.state.fields[this.state.selectedSheet] : [];\n      let fields = []\n      //  Loop through the fields\n      fieldsList.forEach( (field,index) => {\n        //  Is this field the selected field?\n        let isSelected = (isSelection) ? (field.fieldName===savedSelection) : (index===0);\n        //  Create the HTML element\n        fields.push(<option key={index} value={field.fieldName} selected={isSelected}>{field.fieldName}</option>)\n        //  If there is no saved user selection, mark the first item in the list as the selection by default\n        if (isSelected && !isSelection) {\n          setSelection(field.fieldName,'data',key,this);\n        }\n      })\n      return fields;\n    }\n\n    //  Function to produce a set of dropdown menu items for parameters\n    const getParameters = () => {\n      //  Check to see if there's a user selection already saved\n      const savedSelection = this.state.settings.action.parameter;\n      const isSelection = (savedSelection.length>0);\n      //  Loop through each parameter\n      let params = []\n      this.state.parameters.forEach( (parameter,index) => {\n        //  Is this field the selected field?\n        let isSelected = (isSelection) ? (parameter.name===savedSelection) : (index===0);\n        //  Create the HTML element\n        params.push(<option key={index} value={parameter.name} selected={isSelected}>{parameter.name}</option>)\n        //  If there is no saved user selection, mark the first item in the list as the selection by default\n        if (isSelected && !isSelection) {\n          setSelection(parameter.name,'action','parameter',this);\n        }\n      })\n      return params\n    }\n\n    //  Function to produce a set of dropdown menu items for fields valid for the selected parameter\n    const getParamFields = () => {\n\n      //  Check to see if there's a user selection already saved\n      const savedSelection = this.state.settings.action.field;\n      const isSelection = (savedSelection.length>0);\n      //  Safely get a list of all fields for the given worksheet\n      let fieldsList = this.state.fields.hasOwnProperty(this.state.selectedSheet) ? this.state.fields[this.state.selectedSheet] : [];\n      let fields = []\n      //  Loop through the fields\n      fieldsList.forEach( (field,index) => {\n        //  Is this field the selected field?\n        let isSelected = (isSelection) ? (field.fieldName===savedSelection) : (index===0);\n        //  Create the HTML element\n        fields.push(<option key={index} value={field.fieldName} selected={isSelected}>{field.fieldName}</option>)\n        //  If there is no saved user selection, mark the first item in the list as the selection by default\n        if (isSelected && !isSelection) {\n          setSelection(field.fieldName,'action','field',this);\n        }\n      })\n      return fields;\n    }\n\n    //  Function to create dropdown menu options, based on objects with the following format:\n    //  obj = { value: 'selection value', isSelected: true/false, label: 'text to display'}\n    const makeOption = (item, index) => <option key={index} value={item.value} selected={item.isSelected}>{item.label}</option>;\n    \n\n    //  Event handler, for when a dropdown menu selection is changed\n    const setSelection = (value,section,key,thisComponent) => {\n      var newSettings = {...thisComponent.state.settings}\n      newSettings[section][key] = value;\n      thisComponent.setState({'settings': newSettings})\n    }\n    //  Define the data selection page\n    const tab1 =  <div>\n                    <div className=\"tableau-section-title\">Where do we get the data?</div>\n                    <div className=\"tableau-section-group\">\n                      <span className=\"tableau-section-label\">Worksheet:</span>\n                      <DropdownSelect  kind='line'\n                        onChange={ e => { this.setState({'selectedSheet': e.target.value}) }} >\n                        { this.state.worksheets.map(makeOption) }\n                      </DropdownSelect>\n                    </div>\n                    <div className=\"tableau-section-title\">What fields do we use?</div>\n                    <div className=\"tableau-section-group\">\n                      <span className=\"tableau-section-label\">Node ID:</span>\n                      <DropdownSelect  kind='line'\n                        onChange={ e => { setSelection(e.target.value,'data','nodeId',this) }} >\n                        { getFields(\"nodeId\") }\n                      </DropdownSelect>\n                    </div>\n                    <div className=\"tableau-section-group\">\n                      <span className=\"tableau-section-label\">Node Labels:</span>\n                      <DropdownSelect  kind='line'\n                        onChange={ e => { setSelection(e.target.value,'data','nodeLabel',this) }} >\n                        { getFields(\"nodeLabel\") }\n                      </DropdownSelect>\n                    </div>\n                    <div className=\"tableau-section-group\">\n                      <span className=\"tableau-section-label\">Parent IDs:</span>\n                      <DropdownSelect  kind='line'\n                        onChange={ e => { setSelection(e.target.value,'data','parentId',this) }} >\n                        { getFields(\"parentId\") }\n                      </DropdownSelect>\n                    </div>\n                    <div className=\"tableau-section-group\">\n                      <span className=\"tableau-section-label\">Color (optional):</span>\n                      <DropdownSelect  kind='line'\n                        onChange={ e => { setSelection(e.target.value,'data','color',this) }} >\n                        <option key={-1} value={config.none}>None</option>\n                        { getFields(\"color\") }\n                      </DropdownSelect>\n                    </div>\n                  </div>;\n\n    //  Define the parameter selection page\n    const tab2 = <div>\n                  <div className=\"tableau-section-title\">Set a parameter value, on selection</div>\n                    <div className=\"tableau-section-group\">\n                      <Checkbox checked={this.state.settings.action.enabled} \n                      onChange={ e => { setSelection(e.target.checked,'action','enabled',this) }}/>\n                      <span className=\"tableau-section-label\">Enabled</span>\n                    </div>\n                    <div className=\"tableau-section-group\">\n                      <span className=\"tableau-section-label\">Parameter:</span>\n                      <DropdownSelect  kind='line'\n                        onChange={ e => { setSelection(e.target.value,'action','parameter',this) }} >\n                        { getParameters() }\n                      </DropdownSelect>\n                    </div>\n                    <div className=\"tableau-section-group\">\n                      <span className=\"tableau-section-label\">Field Value:</span>\n                      <DropdownSelect  kind='line'\n                        onChange={ e => { setSelection(e.target.value,'action','field',this) }} >\n                        { getParamFields() }\n                      </DropdownSelect>\n                    </div>\n                 </div>;\n\n    //  Formatting option lists\n    let orientationOptions = ['NORTH','WEST','SOUTH','EAST'];\n    let alignmentOptions = ['CENTER','TOP','BOTTOM'];\n\n    //  Define the formatting page\n    const tab3 =  <div>\n                    <div className=\"tableau-section-title\">Formatting Settings</div>\n                    <div className=\"tableau-section-group\">\n                      <span className=\"tableau-section-label\">Root Orientation:</span>\n                      <DropdownSelect  kind='line'\n                        onChange={ e => { setSelection(e.target.value,'formatting','rootNodeOrientation',this) }} >\n                        {\n                          orientationOptions.map(option => <option key={option} value={option} selected={this.state.settings.formatting.rootNodeOrientation===option}>{option}</option>)\n                        }\n                      </DropdownSelect>\n                    </div>\n                    <div className=\"tableau-section-group\">\n                      <span className=\"tableau-section-label\">Node Alignment:</span>\n                      <DropdownSelect  kind='line'\n                        onChange={ e => { setSelection(e.target.value,'formatting','verticalAlignment',this) }} >\n                        {\n                          alignmentOptions.map(option => <option key={option} value={option} selected={this.state.settings.formatting.rootNodeOrientation===option}>{option}</option>)\n                        }\n                      </DropdownSelect>\n                    </div>\n                    <div className=\"tableau-section-group\">\n                      <span className=\"tableau-section-label\">Visible Levels:</span>\n                      <Stepper min={2} max={10} step={1} pageSteps={1} value={this.state.settings.formatting.levelsToShow} \n                        onValueChange={value => setSelection(value, 'formatting', 'levelsToShow',this) } />\n                    </div>\n                  </div>;\n    \n    //  Pick which HTML to render, based on the selected tab\n    const content = {\n      0: tab1,\n      1: tab2,\n      2: tab3\n    }\n\n    //  Create a footer with the save button\n    const footer = <div className=\"tableau-footer\">\n                    <Button kind=\"outline\" key=\"cancelButton\" onClick={this.closeDialog}>Cancel</Button>\n                    <Button kind=\"primary\" key=\"saveButton\" onClick={this.saveThenCloseDialog}>Save</Button>\n                  </div>\n\n    //  Return the HTML to render\n    return (\n      <div className=\"container\">\n        { title }\n        <Tabs tabs={tabs} selectedTabIndex={this.state.selectedTabIndex}\n              onTabChange={(index) => { this.setState({'selectedTabIndex': index});}}>\n          { content[this.state.selectedTabIndex] }\n        </Tabs>\n        { footer }\n      </div>\n    );\n  }\n}\n\nexport default Config;\n","import React from \"react\";\nimport {\n  BrowserRouter as Router,\n  useLocation\n} from \"react-router-dom\";\nimport Extension from './extension/extension';\nimport Config from './config/config';\n\nexport default function App() {\n  return (\n    <Router>\n      <Navigator />\n    </Router>\n  );\n}\n\nfunction Navigator() {\n  \n  //  Get the location object\n  let location = useLocation();\n  \n  //  Decide whether to show the extension or config popup\n  const output = () => {\n    if (location.hash === \"#config\"){\n      return <Config />\n    } else {\n      return <Extension />\n    }\n  }\n  return (\n    <div>\n      { output() }\n    </div>\n  );\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './Main';\n\nReactDOM.render(<App />, document.getElementById('root'));\n","//\tUtility functions used throughout the application\nlet util = {\n\n\t//\tHelper function to log messages to console\n  \tlog: function log(message){\n  \t\tconst prefix = \"TreanJS Extension: \";\n  \t\tconsole.log(prefix + message);\n  \t},\n\t\n\t//\tGet a jquery selector, based on the element's ID\n\tgetSelectorById: function(id){\n\t\treturn '#' + id\n\t},\n\n\t//\tConvert any valid CSS fill type (rgb, hex, standard color string) into a hex\n\t//\treturn { bg: 'background color hex', font: 'appropriate font color'}\n\tcolorToHex: function(color) {\n\n\t\t// Returns the color as an array of [r, g, b, a]\n\t  \tfunction colorToRGBA(color) {\n\t\t    var cvs, ctx;\n\t\t    cvs = document.createElement('canvas');\n\t\t    cvs.height = 1;\n\t\t    cvs.width = 1;\n\t\t    ctx = cvs.getContext('2d');\n\t\t    ctx.fillStyle = color;\n\t\t    ctx.fillRect(0, 0, 1, 1);\n\t\t    return ctx.getImageData(0, 0, 1, 1).data;\n\t\t}\n\n\t\t// Turns a number (0-255) into a 2-character hex number (00-ff)\n\t\tfunction byteToHex(num) {\n\t\t    return ('0'+num.toString(16)).slice(-2);\n\t\t}\n\n\t\t//\tCalculate the font color (black/white), based on background color\n\t\tfunction getFontColor(rgb){\n\n\t\t\t//\tCalculate color brightness difference\n\t\t\t//\thttps://www.w3.org/TR/AERT/#color-contrast\n\t\t\tvar o = Math.round(((parseInt(rgb[0]) * 299) + (parseInt(rgb[1]) * 587) + (parseInt(rgb[2]) * 114)) /1000);\n\n\t\t\t//\t125 is the magic number (range is 500)\n\t\t\treturn (o>125) ? 'black' : 'white'\n\t\t}\n\n\t\t//\tConvert whaterver was given as a color string -> rgb -> hex\n\t    var rgba, hex;\n\t    rgba = colorToRGBA(color);\n\t    hex = [0,1,2].map(\n\t        function(idx) { return byteToHex(rgba[idx]); }\n\t        ).join('');\n\n\t    //\tReturn an object w/ box the background and font colors\n\t    return {\n\t    \t'background': \"#\"+hex,\n\t    \t'font': getFontColor(rgba)\n\t    };\n\t}\n}\n\nmodule.exports = util;"],"sourceRoot":""}